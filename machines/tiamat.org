#+PROPERTY: header-args :tangle yes
* tiamat
** Preamble
#+BEGIN_SRC nix
  { tiamat = { config, pkgs, ... }:
  let
    baseconfig = {};
    secrets = (import ../secrets.nix).tiamat;
    unstable = import <nixos-unstable> { config = baseconfig; };
  in
  {
    imports = [
      <nixos-unstable/nixos/modules/services/misc/lidarr.nix>
      <nixos-unstable/nixos/modules/services/misc/radarr.nix>
      <nixos-unstable/nixos/modules/services/misc/sonarr.nix>
      <nixos-unstable/nixos/modules/services/torrent/transmission.nix>
      <nixos-unstable/nixos/modules/services/web-apps/grocy.nix>
      ../modules/common.nix
    ];

    disabledModules = [
      "services/misc/lidarr.nix"
      "services/misc/radarr.nix"
      "services/misc/sonarr.nix"
      "services/torrent/transmission.nix"
      "services/web-apps/grocy.nix"
    ];

    nixpkgs.config = baseconfig // {
      packageOverrides = pkgs: {
        grocy = unstable.pkgsi686Linux.grocy;
        lidarr = unstable.pkgsi686Linux.lidarr;
        radarr = unstable.pkgsi686Linux.radarr;
        sonarr = unstable.pkgsi686Linux.sonarr;
        transmission = unstable.pkgsi686Linux.transmission;
      };
    };
#+END_SRC
** Configuration
*** Misc
#+BEGIN_SRC nix
  services.logind.lidSwitch = "ignore";
  time.timeZone = "Europe/Ljubljana";
#+END_SRC
*** Networking
#+BEGIN_SRC nix
  networking.useDHCP = false;
  networking.interfaces.enp0s25.useDHCP = true;
#+END_SRC
**** Firewall
#+BEGIN_SRC nix
  networking.firewall = {
    enable = true;
    extraCommands = ''
      iptables -A nixos-fw -s 10.0.0.0/8 -j nixos-fw-accept
      ip6tables -A nixos-fw -s fd00::/16 -j nixos-fw-accept
    '';
    allowedUDPPorts = [
      1194                        # openvpn
    ];
    trustedInterfaces = [ "tun0" ];
  };
#+END_SRC
**** Hostname
#+BEGIN_SRC nix
  networking.hostName = "tiamat";
#+END_SRC
*** Packages
#+BEGIN_SRC nix
  environment.systemPackages = with pkgs; [
    sqlite
  ];
#+END_SRC
*** Services
**** dnsmasq
#+BEGIN_SRC nix
  services.dnsmasq = {
    enable = true;
    extraConfig = ''
      address=/grocy/10.8.0.1
      address=/lidarr/10.8.0.1
      address=/nextcloud/10.8.0.1
      address=/radarr/10.8.0.1
      address=/sonarr/10.8.0.1
      address=/transmission/10.8.0.1
      address=/tt-rss/10.8.0.1
      address=/znc/10.8.0.1
    '';
  };
#+END_SRC
**** grocy
#+BEGIN_SRC nix
  services.grocy = {
    enable = true;
    hostName = "grocy";
    nginx.enableSSL = false;
  };
#+END_SRC
**** Lidarr
#+BEGIN_SRC nix
  services.lidarr.enable = true;
  users.extraUsers.lidarr.extraGroups = [ "transmission" ];
#+END_SRC
**** Nextcloud
#+BEGIN_SRC nix
  services.nextcloud = {
    enable = true;
    hostName = "nextcloud";
    package = pkgs.nextcloud20;

    config = {
      adminpass = secrets.nextcloud.admin-password;
      dbtype = "pgsql";
      dbpass = secrets.nextcloud.database-password;
    };
  };
#+END_SRC
**** NFS
#+BEGIN_SRC nix
  fileSystems."/export/movies" = {
    device = "/var/lib/radarr/.config/Radarr/Downloads";
    options = [ "bind" ];
  };

  fileSystems."/export/music" = {
    device = "/var/lib/lidarr/.config/Lidarr/Downloads";
    options = [ "bind" ];
  };

  fileSystems."/export/torrents" = {
    device = "/var/lib/transmission/Downloads";
    options = [ "bind" ];
  };

  fileSystems."/export/tv" = {
    device = "/var/lib/sonarr/.config/NzbDrone/Downloads";
    options = [ "bind" ];
  };

  services.nfs.server = {
    enable = true;

    exports = ''
      /export          *(ro,fsid=0,insecure,nohide)
      /export/movies   *(ro,fsid=4,insecure,nohide)
      /export/music    *(ro,fsid=6,insecure,nohide)
      /export/torrents *(ro,fsid=1,insecure,nohide)
      /export/tv       *(ro,fsid=5,insecure,nohide)
    '';
  };
#+END_SRC
**** nginx
#+BEGIN_SRC nix
  services.nginx = {
    enable = true;

    recommendedProxySettings = true;

    virtualHosts."lidarr" =  {
      locations."/" = {
        proxyPass = "http://127.0.0.1:8686";
        proxyWebsockets = true;

        extraConfig = ''
          proxy_read_timeout 15m;
        '';
      };
    };

    virtualHosts."radarr" =  {
      locations."/" = {
        proxyPass = "http://127.0.0.1:7878";
        proxyWebsockets = true;

        extraConfig = ''
          proxy_read_timeout 15m;
        '';
      };
    };

    virtualHosts."sonarr" =  {
      locations."/" = {
        proxyPass = "http://127.0.0.1:8989";
        proxyWebsockets = true;

        extraConfig = ''
          proxy_read_timeout 15m;
        '';
      };
    };

    virtualHosts."transmission" =  {
      locations."/" = {
        proxyPass = "http://127.0.0.1:9091";
      };
    };

    virtualHosts."znc" =  {
      locations."/" = {
        proxyPass = "http://127.0.0.1:52211";
      };
    };
  };
#+END_SRC
**** OpenSSH
#+BEGIN_SRC nix
  services.openssh = {
    enable = true;
    openFirewall = false;
  };
#+END_SRC
**** OpenVPN
#+BEGIN_SRC nix
  networking.nat = {
    enable = true;
    externalInterface = "wls1";
    internalInterfaces = [ "tun0" ];
  };

  services.openvpn.servers.server.config = ''
    dev tun

    server 10.8.0.0 255.255.255.0

    ca /root/ovpn/ca.crt
    cert /root/ovpn/tiamat.crt
    key /root/ovpn/tiamat.key
    dh /root/ovpn/dh.pem

    push "dhcp-option DNS 10.8.0.1"
  '';
#+END_SRC
**** PostgreSQL
#+BEGIN_SRC nix
  services.postgresql = {
    enable = true;

    initialScript = pkgs.writeText "pg-init.sql" ''
      CREATE DATABASE nextcloud;
      CREATE USER nextcloud WITH PASSWORD '${secrets.nextcloud.database-password}';
      GRANT ALL PRIVILEGES ON DATABASE nextcloud TO nextcloud;

      CREATE DATABASE tt_rss;
      CREATE USER tt_rss WITH PASSWORD '${secrets.tt-rss.database-password}';
      GRANT ALL PRIVILEGES ON DATABASE tt_rss TO tt_rss;
    '';
  };
#+END_SRC
**** Radarr
#+BEGIN_SRC nix
  services.radarr.enable = true;
  users.extraUsers.radarr.extraGroups = [ "transmission" ];
#+END_SRC
**** Sonarr
#+BEGIN_SRC nix
  services.sonarr.enable = true;
  users.extraUsers.sonarr.extraGroups = [ "transmission" ];
#+END_SRC
**** Transmission
#+BEGIN_SRC nix
  services.transmission = {
    enable = true;

    downloadDirPermissions = "775";

    settings = {
      alt-speed-enabled = true;
      alt-speed-down = 750;
      alt-speed-up = 50;
      rpc-bind-address = "0.0.0.0";
      rpc-host-whitelist-enabled = false;
      rpc-whitelist-enabled = false;
    };
  };
#+END_SRC
**** TT-RSS
#+BEGIN_SRC nix
  nixpkgs.overlays = [(self: super: {
    tt-rss = super.tt-rss.overrideAttrs (oldAttrs: {
      src = [
        oldAttrs.src
        (super.fetchFromGitHub {
          owner = "jangernert";
          repo = "FeedReader";
          rev = "4bde7137a9db043395e6623c190cb0d02dda1d2e";
          sha256 = "185mwrd0h5gy18h7gv44gm00wbzz9h1m9lkfz071yqcswbxqrm82";
          name = "FeedReader";
        })
      ];

      sourceRoot = ".";

      installPhase = ''
        mkdir $out
        cp -ra tt-rss/* $out/
      '';

      postUnpack = ''
        cp -r FeedReader/data/tt-rss-feedreader-plugin/api_feedreader tt-rss/plugins.local
      '';
    });
  })];

  services.tt-rss = {
    enable = true;
    selfUrlPath = "http://tt-rss";
    virtualHost = "tt-rss";
    database = {
      host = "localhost";
      password = secrets.tt-rss.database-password;
    };
    plugins = [
      "api_feedreader"
      "auth_internal"
      "note"
    ];
  };
#+END_SRC
**** ZNC
#+BEGIN_SRC nix
  services.znc = {
    enable = true;
    configFile = pkgs.writeText "znc.conf" ''
      Version = 1.6.5

      <Listener irc>
        AllowIRC = true
        AllowWeb = false
        IPv4     = true
        IPv6     = false
        Port     = 6697
        SSL      = true
      </Listener>

      <Listener web>
        AllowIRC = false
        AllowWeb = true
        IPv4     = true
        IPv6     = false
        Port     = 52211
        SSL      = false
      </Listener>

      LoadModule = webadmin

      <User me>
        Admin               = true
        AltNick             = me_
        AutoClearChanBuffer = false
        Ident               = me
        Nick                = me
        RealName            = me

        LoadModule = chansaver
        LoadModule = controlpanel

        <Pass password>
          Hash   = ${secrets.znc.user-pass-hash}
          Method = ${secrets.znc.user-pass-method}
          Salt   = ${secrets.znc.user-pass-salt}
        </Pass>
      </User>
    '';
  };
#+END_SRC
** Epilogue
#+BEGIN_SRC nix
      system.stateVersion = "20.09";
    };
  }
#+END_SRC
